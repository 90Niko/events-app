import { prisma } from "@/lib/prisma";
import AutoPrint from "@/components/AutoPrint";

export const dynamic = "force-dynamic";

type Search = { [k: string]: string | string[] | undefined };

function toNum(v: any) {
  return Number((v?.toString?.() ?? v) ?? 0);
}

async function getIncome(filters: { start?: string; end?: string; category?: string }) {
  const anyPrisma: any = prisma as any;
  const { start, end, category } = filters;
  const gte = start ? new Date(start) : undefined;
  const lte = end ? new Date(end) : undefined;

  if (anyPrisma?.eventLedger?.findMany) {
    const where: any = { entry_type: "income" };
    if (gte || lte) where.entry_date = { ...(gte ? { gte } : {}), ...(lte ? { lte } : {}) };
    if (category) where.category = { contains: category, mode: "insensitive" };
    const entries = await anyPrisma.eventLedger.findMany({
      where,
      include: { event: { select: { name: true } } },
      orderBy: { id: "desc" },
    });
    return entries as any[];
  }
  const rows = await anyPrisma.$queryRaw`
    SELECT el.id, el.event_id, el.entry_type, el.category, el.description, el.amount, el.currency, el.entry_date, el.payment_method, el.counterparty, e.name AS event_name
    FROM event_ledger el
    JOIN events e ON e.id = el.event_id
    WHERE el.entry_type = 'income'
    ORDER BY el.id DESC`;
  return rows as any[];
}

export default async function IncomePrintPage({ searchParams }: { searchParams: Promise<Search> }) {
  const sp = await searchParams;
  const id = typeof sp?.id === "string" ? sp.id : "";
  const start = typeof sp?.start === "string" ? sp.start : "";
  const end = typeof sp?.end === "string" ? sp.end : "";
  const category = typeof sp?.category === "string" ? sp.category : "";
  let entries = await getIncome({ start, end, category });
  if (id) entries = entries.filter((e: any) => String(e.id ?? "") === String(id));
  const total = entries.reduce((s, x: any) => s + toNum(x.amount), 0);

  return (
    <div className="print-invoice">
      <AutoPrint />
      <div className="invoice-title">Income Report</div>
      <div className="invoice-meta">
        <div>Period: {start || '—'} to {end || '—'}</div>
        {category ? <div>Category: {category}</div> : null}
      </div>
      <table className="invoice-table">
        <thead>
          <tr>
            <th>Date</th>
            <th>Event</th>
            <th>Category</th>
            <th>Description</th>
            <th>Payment</th>

            <th className="text-right">Amount (EUR)</th>
          </tr>
        </thead>
        <tbody>
          {entries.map((x: any) => (
            <tr key={String(x.id)}>
              <td>{x.entry_date ? new Date(x.entry_date).toISOString().slice(0,10) : '-'}</td>
              <td>{x.event?.name ?? x.event_name ?? '-'}</td>
              <td>{x.category ?? '-'}</td>
              <td>{x.description ?? '-'}</td>
              <td>{x.payment_method ?? '-'}</td>

              <td className="text-right">{toNum(x.amount).toFixed(2)} EUR</td>
            </tr>
          ))}
        </tbody>
        <tfoot>
          <tr>
            <td colSpan={6} className="text-right"><strong>Total</strong></td>
            <td className="text-right"><strong>{total.toFixed(2)} EUR</strong></td>
          </tr>
        </tfoot>
      </table>
      <div className="invoice-footer">Generated by Events App</div>
    </div>
  );
}
