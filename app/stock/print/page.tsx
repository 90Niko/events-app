import { prisma } from "@/lib/prisma";
import AutoPrint from "@/components/common/AutoPrint";

export const dynamic = "force-dynamic";

function toNum(v: any) {
  return Number((v?.toString?.() ?? v) ?? 0);
}

function parseUnit(desc: any): 'kg' | 'pcs' {
  const s = (desc?.toString?.() ?? '').toString();
  const m = s.match(/\[unit:(kg|pcs)\]/i);
  return (m?.[1]?.toLowerCase?.() as any) === 'pcs' ? 'pcs' : 'kg';
}

function stripUnit(desc: any): string {
  const s = (desc?.toString?.() ?? '').toString();
  return s.replace(/\s*\[unit:(kg|pcs)\]\s*/i, '').trim();
}

async function getRows(id?: string) {
  const anyPrisma: any = prisma as any;
  if (anyPrisma?.stock?.findMany) {
    const where: any = {};
    if (id) where.id = BigInt(id);
    return await anyPrisma.stock.findMany({ where, orderBy: { id: 'desc' } });
  }
  if (id) {
    return await (anyPrisma as any).$queryRaw`SELECT * FROM stock WHERE id = ${BigInt(id)} ORDER BY id DESC`;
  }
  return await (anyPrisma as any).$queryRaw`SELECT * FROM stock ORDER BY id DESC`;
}

export default async function StockPrintPage({ searchParams }: { searchParams: Promise<{ id?: string }> }) {
  const sp = await searchParams;
  const id = typeof sp?.id === 'string' ? sp.id : '';
  const rows: any[] = await getRows(id);
  return (
    <div className="print-invoice"> 
      <AutoPrint />
      <div className="invoice-title">Stock Report</div>
      <div className="invoice-meta">{id ? (<div>Entry ID: {id}</div>) : (<div>All entries</div>)}</div>
      <table className="invoice-table">
        <thead>
          <tr>
            <th>Date</th>
            <th>Purchased by</th>
            <th>Payment</th>
            <th>Price (EUR)</th>
            <th>Quantity</th>
            <th>Total (EUR)</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          {rows.map((x: any) => {
            const unit = parseUnit(x.description);
            const qty = unit === 'kg' ? toNum(x.weight_kg).toFixed(3) + ' kg' : toNum(x.weight_kg).toFixed(0) + ' pcs';
            const price = toNum(x.price_per_kg).toFixed(2) + ` EUR/${unit}`;
            const total = (toNum(x.price_per_kg) * toNum(x.weight_kg)).toFixed(2);
            return (
              <tr key={String(x.id)}>
                <td>{x.purchase_date ? new Date(x.purchase_date).toISOString().slice(0,10) : '-'}</td>
                <td>{x.purchased_by ?? '-'}</td>
                <td>{x.payment_method ?? '-'}</td>
                <td>{price}</td>
                <td>{qty}</td>
                <td className="text-right">{total} EUR</td>
                <td>{stripUnit(x.description) || '-'}</td>
              </tr>
            );
          })}
        </tbody>
      </table>
      <div className="invoice-footer">Generated by Events App</div>
    </div>
  );
}
